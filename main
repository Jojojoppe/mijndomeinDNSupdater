#!/usr/bin/env python3
import json
import argparse
import time
import os
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException

# Command-line argument parser
parser = argparse.ArgumentParser(description="Update MijnDomijn DNS entries.")
parser.add_argument(
    "-c", "--config", metavar="file", type=str, default="config.cnf",
    help="Change default config file."
)

# Main loop
def main(args=None):
    # Get arguments
    args = parser.parse_args(args)

    # Config
    cnf_file=args.config
    try:
        cnf_data=open(cnf_file)
    except IOError:
        print("Config file does not exists!");
        return
    cnf = json.load(cnf_data)
    cnf_data.close();

    if cnf['display']:
        from pyvirtualdisplay import Display
        display = Display(visible=0, size=(800,600))
        display.start()

    if cnf['driver'] == 'chrome':
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox') # required when running as root user. otherwise you would get no sandbox errors. 
        driver = webdriver.Chrome(chrome_options=chrome_options, service_args=['--verbose', '--log-path=/tmp/chromedriver.log'])
    elif cnf['driver'] == 'firefox':
        driver = webdriver.Firefox()
    elif cnf['driver'] == 'phantomjs':
        driver = webdriver.PhantomJS()
    else:
        print('ERROR: unknown driver')
        return

    # Get ip
    print("+ Getting ip")
    driver.get("https://myexternalip.com/raw")
    myip = driver.find_element_by_xpath("//html//body").text
    print("\t>", myip)

    print("+ Logging in")
    driver.get("https://auth.mijndomein.nl/login")
    driver.find_element_by_name("_username").send_keys(cnf['email'])
    driver.find_element_by_name("_password").send_keys(cnf['password'])
    driver.find_element_by_xpath("//form[@action='/login_check']").submit()
    print("\t> Done")

    print("+ Entering md3 environment")
    WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "my-packages")))
    driver.get("https://md3.mijndomein.nl/Profile/reseller")
    print("\t> Done")

    for domain in cnf['domains']:
        print("+ Domain", domain['name'])
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "selectdomainbox_replacement")))
        elem = driver.find_element_by_id('selectdomainbox_replacement')
        elem.clear()
        elem.send_keys(domain['name'])
        elem.send_keys(Keys.RETURN)
        time.sleep(2)
        print("\t> Page entered, goto DNS setitngs")

        a = driver.execute_script("puntapi.DoCommand('dnsclient','dnsadmin','','','');")
        element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "Formid")))
        print("\t> DNS settings reached")

        for subdomain in domain['subdomains']:
            print("- Subdomain", subdomain)

            try:
                if subdomain == '':
                    driver.find_element_by_xpath("//div[text()='1']").click()
                    elem = driver.find_element_by_xpath("//div[text()='1']/following::input[3]")
                    elem.clear()
                    elem.send_keys(myip)
                    driver.find_element_by_xpath("//div[text()='1']/following::div[8]").click()
                    print("\t> Done")
                else:
                    driver.find_element_by_xpath("//div[text()='" + subdomain + "']").click()
                    elem = driver.find_element_by_xpath("//div[text()='" + subdomain + "']/following::input[2]")
                    elem.clear()
                    elem.send_keys(myip)
                    driver.find_element_by_xpath("//div[text()='" + subdomain + "']/following::div[6]").click()
                    print("\t> Done")
            except NoSuchElementException:
                print("\t> Error: Subdomain not found")
                continue

        print("+ Save settings")
        driver.execute_script("window.confirm = function(){return true;}");
        driver.find_element_by_xpath("//td[text()='Opslaan']/ancestor::div[1]").click()

        element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//div[text()='DNS opgeslagen']")))
        print("\t> Done")

    driver.quit()

    if cnf['display']:
        display.stop()

if __name__ == '__main__':
    try:
        main()
    except (KeyboardInterrupt, BrokenPipeError):
        pass
